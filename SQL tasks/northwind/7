1. Создать таблицу exam с полями:

- идентификатора экзамена - автоинкрементируемый, уникальный, запрещает NULL;
- наименования экзамена
- даты экзамена

2. Удалить ограничение уникальности с поля идентификатора

3. Добавить ограничение первичного ключа на поле идентификатора

4. Создать таблицу person с полями

- идентификатора личности (простой int, первичный ключ)
- имя
- фамилия

5. Создать таблицу паспорта с полями:

- идентификатора паспорта (простой int, первичный ключ)
- серийный номер (простой int, запрещает NULL)
- регистрация
- ссылка на идентификатор личности (внешний ключ)

6. Добавить колонку веса в таблицу book (создавали ранее) с ограничением, проверяющим вес (больше 0 но меньше 100)

7. Убедиться в том, что ограничение на вес работает (попробуйте вставить невалидное значение)

8. Создать таблицу student с полями:

- идентификатора (автоинкремент)
- полное имя
- курс (по умолчанию 1)

9. Вставить запись в таблицу студентов и убедиться, что ограничение на вставку значения по умолчанию работает

10. Удалить ограничение "по умолчанию" из таблицы студентов

11. Подключиться к БД northwind и добавить ограничение на поле unit_price таблицы products (цена должна быть больше 0)

12. "Навесить" автоинкрементируемый счётчик на поле product_id таблицы products (БД northwind). Счётчик должен начинаться с числа следующего за максимальным значением
по этому столбцу.

DROP TABLE IF EXISTS exam;

--1
CREATE TABLE exam (
	exam_id serial UNIQUE NOT NULL,
	exam_name varchar(32),
	exam_date date,

);

--2
ALTER TABLE exam
DROP CONSTRAINT exam_exam_id_key

--3
ALTER TABLE exam
ADD PRIMARY KEY (exam_id);

--4
DROP TABLE IF EXISTS person;
CREATE TABLE person(
	person_id int GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	first_name varchar(32),
	last_name varchar(32)
)

--5
CREATE TABLE passport(
	passport_id int GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	serial_number int NOT NULL,
	registration text,
	person_id int REFERENCES person(person_id)
)

--6
DROP TABLE IF EXISTS book;
CREATE TABLE book(
	book_id int GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	book_name varchar(32)
);

ALTER TABLE book
ADD COLUMN weight decimal
CONSTRAINT CHK_book_weight CHECK (weight > 0 AND weight < 100)

--7
INSERT INTO book
(book_name, weight)
values
('замок', 3.2)

INSERT INTO book
(book_name, weight)
values
('процесс', 120)
 
 SELECT *
 FROM book

--8
CREATE TABLE student(
	student_id int GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	full_name varchar(128),
	course int DEFAULT 1
)

--9
INSERT INTO student
(full_name)
values
('Саня')

SELECT * 
FROM student

--10
ALTER TABLE student
ALTER COLUMN course
DROP DEFAULT

--11
ALTER TABLE products
ADD CONSTRAINT chk_unit_price CHECK (unit_price > 0)

--12
CREATE SEQUENCE IF NOT EXISTS products_product_id_seq
START WITH 78 OWNED BY products.product_id

ALTER TABLE products
ALTER COLUMN poduct_id SET DEFAULT nextval('products_product_id_seq');
